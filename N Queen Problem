class Solution:
    def __init__(self):
        self.ans = []

    def isSafe(self, board, r, c, n):
        i = 0
        for i in range(r):
            if (board[i][c]==1):
                return False
        i = r-1
        j = c-1
        while i >= 0 and j >= 0:
            if board[i][j] == 1:
                return False
            i -= 1
            j -= 1

        i = r-1
        j = c+1

        while i>=0 and j<n:
            if board[i][j] == 1:
                return False
            i-=1
            j+=1
        return True

    def helper(self, board, n, r):
        if (r == n):
            solution = []
            for i in range(n):
                temp = ""
                for j in range(n):
                    
                    if board[i][j]==1:
                        temp+='Q'
                    else:
                        temp+='.'
                solution.append(temp)
            self.ans.append(solution)
            return

        for i in range(n):
            if (self.isSafe(board, r, i, n)):
                board[r][i] =1
                self.helper(board,n, r+1)
                board[r][i] =0


    
    def solveNQueens(self, n: int) -> List[List[str]]:
        self.ans = []

        board = [[0]*n for _ in range(n)]
        self.helper(board,n,0)
        return self.ans





        
